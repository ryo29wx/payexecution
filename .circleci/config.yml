# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  slack: circleci/slack@3.3.0

jobs:
  publish-test-container:
    docker:
      - image: google/cloud-sdk:264.0.0
        environment:
          GCR_REPO_TEST: gcr.io/go-portforio/consumer-test:circle-ci
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
      - run:
          name: Authenticate gcloud to push the image
          command: |
            echo $GCP_SERVICE_KEY | gcloud auth activate-service-account --key-file -
            gcloud auth configure-docker --quiet
      - run:
          name: gcloud install & setting
          command: |
            curl -s https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-196.0.0-linux-x86_64.tar.gz | tar xz
            source ./google-cloud-sdk/path.bash.inc
      - run:
          name: Build the searchitem
          command: |
            docker build -t ${GCR_REPO_TEST} --build-arg TOKEN=${GIT_PRIVATE_TOKEN} .
      - run:
          name: Push the searchitem
          command: |
            docker push ${GCR_REPO_TEST}
  publish:
    docker:
      - image: google/cloud-sdk:264.0.0
        environment:
          GCR_REPO_1: gcr.io/go-portforio/purchase-request-consumer:circle-ci
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
      - run:
          name: Authenticate gcloud to push the image
          command: |
            echo $GCP_SERVICE_KEY | gcloud auth activate-service-account --key-file -
            gcloud auth configure-docker --quiet
      - run:
          name: gcloud install & setting
          command: |
            curl -s https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-196.0.0-linux-x86_64.tar.gz | tar xz
            source ./google-cloud-sdk/path.bash.inc
      - run:
          name: Build the consumer
          command: |
            docker build -t ${GCR_REPO_1} .
      - run:
          name: Push the consumer
          command: |
            docker push ${GCR_REPO_1}
      - slack/status:
          success_message: ':circleci-pass: $CIRCLE_BRANCH のデプロイが完了しました\n:github_octocat: User：$CIRCLE_USERNAME'
          failure_message: ':circleci-fail: $CIRCLE_BRANCH のデプロイが失敗しました\n:github_octocat: User：$CIRCLE_USERNAME'
          webhook: '${SLACK_WEBHOOK}'
  test:
    docker:
      - image: circleci/golang:1.16
        environment:
          SECRET_USER: root
          SECRET_PASS: testpass
          SECRET_DB: cloudsql.mockten.db.com
          SECRET_TABLE: 
      - image: circleci/redis:6.0-alpine
      - image: circleci/mysql:8.0
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_PASSWORD: testpass
          MYSQL_DATABASE: cloudsql.mockten.db.com
          MYSQL_HOST: 127.0.0.1
    working_directory: /go/src/
    steps:
      - checkout
      - run:
          command: |
            go get github.com/yabamuro/gocelery &&
            go get github.com/go-sql-driver/mysql &&
            go get github.com/go-redis/redis/v8 &&
            go get github.com/stripe/stripe-go &&
            go get github.com/stripe/stripe-go/paymentintent &&
            go get github.com/prometheus/client_golang/prometheus &&
            go get github.com/prometheus/client_golang/prometheus/promhttp &&
            go build src/worker.go

workflows:
  version: 2
  test_and_testpublish:
    jobs:
      - test:
          filters:  # 正規表現フィルターを使用すると、ブランチ全体が一致する必要があります
            branches:
              only:  # 以下の正規表現フィルターに一致するブランチのみが実行されます
                - test
                - develop
      - publish-test-container:
          requires:
          - test
  test_and_prodpublish:
    jobs:
      - hold: # <<< CircleCI Web アプリケーションで手動承認を必要とするジョブ。
          type: approval
          filters:  
            branches:
              only:
                - master
      - test:
          requires:
          - hold
      - publish:
          requires:
          - test